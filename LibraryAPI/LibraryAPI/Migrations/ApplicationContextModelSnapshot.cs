// <auto-generated />
using System;
using LibraryAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookLibrary", b =>
                {
                    b.Property<string>("LibrariesName")
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("LibraryName")
                        .HasColumnType("int");

                    b.HasKey("LibrariesName", "LibraryName");

                    b.HasIndex("LibraryName");

                    b.ToTable("BookLibrary");
                });

            modelBuilder.Entity("LibraryAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<long>("IdNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LibraryAPI.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BirthYear")
                        .HasColumnType("smallint");

                    b.Property<short?>("DeathYear")
                        .HasColumnType("smallint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryAPI.Models.AuthorRepresentativeBook", b =>
                {
                    b.Property<long>("AuthorsId")
                        .HasColumnType("bigint");

                    b.Property<int>("RepresentativeBooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "RepresentativeBooksId");

                    b.HasIndex("RepresentativeBooksId");

                    b.ToTable("AuthorRepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DonatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfBorrowings")
                        .HasColumnType("int");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.Property<byte?>("Situation")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DonatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RepresentativeBookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.BookLanguage", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.HasKey("LanguageCode", "RepresentativeBookId");

                    b.HasIndex("RepresentativeBookId");

                    b.ToTable("BookLanguage");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.DisLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RepresentativeBookId");

                    b.HasIndex("RepresentativeBookId");

                    b.ToTable("DisLike");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.LibraryRepresentativeBookStock", b =>
                {
                    b.Property<string>("LibraryName")
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("LibraryName", "RepresentativeBookId");

                    b.HasIndex("RepresentativeBookId");

                    b.ToTable("LibraryRepresentativeBookStock", (string)null);
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.Like", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RepresentativeBookId");

                    b.HasIndex("RepresentativeBookId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.PublisherEMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EMail")
                        .HasMaxLength(345)
                        .HasColumnType("varchar(345)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EMail")
                        .IsUnique()
                        .HasFilter("[EMail] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherEMail");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.PublisherPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Phone")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherPhone");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.PublisherRepresentativeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepresentativeBookId");

                    b.HasIndex("PublisherId", "RepresentativeBookId")
                        .IsUnique();

                    b.ToTable("PublisherRepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.RepresentativeBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<float>("BookThickness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(260)
                        .HasColumnType("varchar(260)");

                    b.Property<short>("PageCount")
                        .HasColumnType("smallint");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<short>("PublishingYear")
                        .HasColumnType("smallint");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Image")
                        .IsUnique()
                        .HasFilter("[Image] IS NOT NULL");

                    b.ToTable("RepresentativeBooks");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.RepresentativeBookCategorySubCategory", b =>
                {
                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SubCategoryId")
                        .HasColumnType("smallint");

                    b.HasKey("RepresentativeBookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("RepresentativeBookCategorySubCategory", (string)null);
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.RepresentativeBookRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RepresentativeBookRating");
                });

            modelBuilder.Entity("LibraryAPI.Models.Donator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfBorrowings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Donators");
                });

            modelBuilder.Entity("LibraryAPI.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfBorrowings")
                        .HasColumnType("int");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LibraryAPI.Models.Favourite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepresentativeBookId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RepresentativeBookId");

                    b.HasIndex("RepresentativeBookId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("LibraryAPI.Models.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("char(100)");

                    b.HasKey("Code");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("LibraryAPI.Models.Library", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Name");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("LibraryAPI.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LibraryAPI.Models.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("EducationalStatus")
                        .HasColumnType("tinyint");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfBorrowings")
                        .HasColumnType("int");

                    b.Property<int?>("TotalFine")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("LibraryAPI.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("LibraryAPI.Models.SubCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("LibraryAPI.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelivered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookLibrary", b =>
                {
                    b.HasOne("LibraryAPI.Models.Library", null)
                        .WithMany()
                        .HasForeignKey("LibrariesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("LibraryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAPI.Models.AuthorRepresentativeBook", b =>
                {
                    b.HasOne("LibraryAPI.Models.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBook")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("RepresentativeBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("RepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryAPI.Models.Donator", null)
                        .WithMany("LoanedBooks")
                        .HasForeignKey("DonatorId");

                    b.HasOne("LibraryAPI.Models.Employee", null)
                        .WithMany("LoanedBooks")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("LibraryAPI.Models.Location", "Location")
                        .WithMany("Books")
                        .HasForeignKey("LocationId");

                    b.HasOne("LibraryAPI.Models.Member", null)
                        .WithMany("LoanedBooks")
                        .HasForeignKey("MemberId");

                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBook")
                        .WithMany("Book")
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("RepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.BookLanguage", b =>
                {
                    b.HasOne("LibraryAPI.Models.Language", "Language")
                        .WithMany("BookLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBook")
                        .WithMany("BookLanguages")
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("RepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.DisLike", b =>
                {
                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBooks")
                        .WithMany()
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Member", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepresentativeBooks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.LibraryRepresentativeBookStock", b =>
                {
                    b.HasOne("LibraryAPI.Models.Library", "Library")
                        .WithMany("LibraryRepresentativeBookStocks")
                        .HasForeignKey("LibraryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBook")
                        .WithMany("LibraryRepresentativeBookStocks")
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("RepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.Like", b =>
                {
                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBooks")
                        .WithMany()
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Member", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepresentativeBooks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.PublisherEMail", b =>
                {
                    b.HasOne("LibraryAPI.Models.Publisher", "Publisher")
                        .WithMany("PublisherEMails")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.PublisherPhone", b =>
                {
                    b.HasOne("LibraryAPI.Models.Publisher", "Publisher")
                        .WithMany("PublisherPhones")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.PublisherRepresentativeBook", b =>
                {
                    b.HasOne("LibraryAPI.Models.Publisher", "Publisher")
                        .WithMany("PublisherRepresentativeBooks")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBook")
                        .WithMany("PublisherRepresentativeBooks")
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("RepresentativeBook");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.RepresentativeBookCategorySubCategory", b =>
                {
                    b.HasOne("LibraryAPI.Models.Category", "Category")
                        .WithMany("RepresentativeBookCategorySubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBook")
                        .WithMany("RepresentativeBookCategorySubCategories")
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.SubCategory", "SubCategory")
                        .WithMany("RepresentativeBookCategorySubCategories")
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Category");

                    b.Navigation("RepresentativeBook");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("LibraryAPI.Models.Donator", b =>
                {
                    b.HasOne("LibraryAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LibraryAPI.Models.Employee", b =>
                {
                    b.HasOne("LibraryAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LibraryAPI.Models.Favourite", b =>
                {
                    b.HasOne("LibraryAPI.Models.Concrete.RepresentativeBook", "RepresentativeBooks")
                        .WithMany()
                        .HasForeignKey("RepresentativeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.Member", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepresentativeBooks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAPI.Models.Member", b =>
                {
                    b.HasOne("LibraryAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LibraryAPI.Models.Transaction", b =>
                {
                    b.HasOne("LibraryAPI.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibraryAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibraryAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibraryAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryAPI.Models.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Navigation("RepresentativeBookCategorySubCategories");
                });

            modelBuilder.Entity("LibraryAPI.Models.Concrete.RepresentativeBook", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("Book");

                    b.Navigation("BookLanguages");

                    b.Navigation("LibraryRepresentativeBookStocks");

                    b.Navigation("PublisherRepresentativeBooks");

                    b.Navigation("RepresentativeBookCategorySubCategories");
                });

            modelBuilder.Entity("LibraryAPI.Models.Donator", b =>
                {
                    b.Navigation("LoanedBooks");
                });

            modelBuilder.Entity("LibraryAPI.Models.Employee", b =>
                {
                    b.Navigation("LoanedBooks");
                });

            modelBuilder.Entity("LibraryAPI.Models.Language", b =>
                {
                    b.Navigation("BookLanguages");
                });

            modelBuilder.Entity("LibraryAPI.Models.Library", b =>
                {
                    b.Navigation("LibraryRepresentativeBookStocks");
                });

            modelBuilder.Entity("LibraryAPI.Models.Location", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAPI.Models.Member", b =>
                {
                    b.Navigation("LoanedBooks");
                });

            modelBuilder.Entity("LibraryAPI.Models.Publisher", b =>
                {
                    b.Navigation("PublisherEMails");

                    b.Navigation("PublisherPhones");

                    b.Navigation("PublisherRepresentativeBooks");
                });

            modelBuilder.Entity("LibraryAPI.Models.SubCategory", b =>
                {
                    b.Navigation("RepresentativeBookCategorySubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
